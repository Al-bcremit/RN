"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeReanimated = void 0;

var _reactNative = require("react-native");

var _package = require("../../../package.json");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class NativeReanimated {
  constructor() {
    let native = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    _defineProperty(this, "native", void 0);

    _defineProperty(this, "InnerNativeModule", void 0);

    if (global.__reanimatedModuleProxy === undefined && native) {
      const {
        ReanimatedModule
      } = _reactNative.NativeModules;
      ReanimatedModule === null || ReanimatedModule === void 0 ? void 0 : ReanimatedModule.installTurboModule();
    }

    this.InnerNativeModule = global.__reanimatedModuleProxy;
    this.native = native;

    if (native) {
      this.checkVersion();
    }
  }

  checkVersion() {
    const cppVersion = global._REANIMATED_VERSION_CPP;

    const ok = (() => {
      if (_package.version.match(/^\d+\.\d+\.\d+$/) && cppVersion.match(/^\d+\.\d+\.\d+$/)) {
        // x.y.z, compare only major and minor, skip patch
        const [jsMajor, jsMinor] = _package.version.split('.');

        const [cppMajor, cppMinor] = cppVersion.split('.');
        return jsMajor === cppMajor && jsMinor === cppMinor;
      } else {
        // alpha, beta or rc, compare everything
        return _package.version === cppVersion;
      }
    })();

    if (!ok) {
      console.error(`[Reanimated] Mismatch between JavaScript part and native part of Reanimated (${_package.version} vs. ${cppVersion}). Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must downgrade to ${cppVersion} which is bundled into Expo SDK.`); // TODO: detect Expo managed workflow
    }
  }

  getTimestamp() {
    throw new Error('stub implementation, used on the web only');
  }

  installCoreFunctions(valueUnpacker) {
    return this.InnerNativeModule.installCoreFunctions(valueUnpacker);
  }

  makeShareableClone(value) {
    return this.InnerNativeModule.makeShareableClone(value);
  }

  makeSynchronizedDataHolder(valueRef) {
    return this.InnerNativeModule.makeSynchronizedDataHolder(valueRef);
  }

  getDataSynchronously(ref) {
    return this.InnerNativeModule.getDataSynchronously(ref);
  }

  updateDataSynchronously(ref, value) {
    this.InnerNativeModule.updateDataSynchronously(ref, value);
  }

  scheduleOnUI(shareable) {
    return this.InnerNativeModule.scheduleOnUI(shareable);
  }

  registerSensor(sensorType, interval, handler) {
    return this.InnerNativeModule.registerSensor(sensorType, interval, handler);
  }

  unregisterSensor(sensorId) {
    return this.InnerNativeModule.unregisterSensor(sensorId);
  }

  registerEventHandler(eventHash, eventHandler) {
    return this.InnerNativeModule.registerEventHandler(eventHash, eventHandler);
  }

  unregisterEventHandler(id) {
    return this.InnerNativeModule.unregisterEventHandler(id);
  }

  getViewProp(viewTag, propName, callback) {
    return this.InnerNativeModule.getViewProp(viewTag, propName, callback);
  }

  configureLayoutAnimation(viewTag, type, config) {
    this.InnerNativeModule.configureLayoutAnimation(viewTag, type, config);
  }

  enableLayoutAnimations(flag) {
    this.InnerNativeModule.enableLayoutAnimations(flag);
  }

  configureProps(uiProps, nativeProps) {
    this.InnerNativeModule.configureProps(uiProps, nativeProps);
  }

  subscribeForKeyboardEvents(handler) {
    return this.InnerNativeModule.subscribeForKeyboardEvents(handler);
  }

  unsubscribeFromKeyboardEvents(listenerId) {
    this.InnerNativeModule.unsubscribeFromKeyboardEvents(listenerId);
  }

}

exports.NativeReanimated = NativeReanimated;
//# sourceMappingURL=NativeReanimated.js.map