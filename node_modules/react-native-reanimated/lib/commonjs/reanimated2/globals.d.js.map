{"version":3,"names":[],"sources":["globals.d.ts"],"sourcesContent":["import type {\n  AnimatedStyle,\n  StyleProps,\n  MeasuredDimensions,\n  MapperRegistry,\n  ShareableRef,\n  ShareableSyncDataHolderRef,\n} from './commonTypes';\nimport type { ReanimatedConsole } from './core';\nimport type { FrameCallbackRegistryUI } from './frameCallback/FrameCallbackRegistryUI';\nimport type { ShadowNodeWrapper } from './hook/commonTypes';\nimport { LayoutAnimationStartFunction } from './layoutReanimation';\nimport type { NativeReanimated } from './NativeReanimated/NativeReanimated';\n\ndeclare global {\n  const _WORKLET: boolean;\n  const _IS_FABRIC: boolean;\n  const _REANIMATED_VERSION_CPP: string;\n  const _frameTimestamp: number | null;\n  const _eventTimestamp: number;\n  const __reanimatedModuleProxy: NativeReanimated;\n  const _setGlobalConsole: (console?: ReanimatedConsole) => void;\n  const _log: (s: string) => void;\n  const _getCurrentTime: () => number;\n  const _getTimestamp: () => number;\n  const _notifyAboutProgress: (tag: number, value: number) => void;\n  const _notifyAboutEnd: (\n    tag: number,\n    finished: boolean,\n    removeView: boolean\n  ) => void;\n  const _setGestureState: (handlerTag: number, newState: number) => void;\n  const _makeShareableClone: (value: any) => any;\n  const _updateDataSynchronously: (\n    dataHolder: ShareableSyncDataHolderRef,\n    data: ShareableRef\n  ) => void;\n  const _scheduleOnJS: (fun: ShareableRef, args?: ShareableRef) => void;\n  const _updatePropsPaper: (\n    tag: number,\n    name: string,\n    updates: StyleProps | AnimatedStyle\n  ) => void;\n  const _updatePropsFabric: (\n    shadowNodeWrapper: ShadowNodeWrapper,\n    props: StyleProps | AnimatedStyle\n  ) => void;\n  const _removeShadowNodeFromRegistry: (\n    shadowNodeWrapper: ShadowNodeWrapper\n  ) => void;\n  const _measure: (viewTag: number) => MeasuredDimensions;\n  const _scrollTo: (\n    viewTag: number,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => void;\n  const _dispatchCommand: (\n    shadowNodeWrapper: ShadowNodeWrapper,\n    commandName: string,\n    args: Array<unknown>\n  ) => void;\n  const _chronoNow: () => number;\n  const performance: { now: () => number };\n  const ReanimatedDataMock: {\n    now: () => number;\n  };\n  const _frameCallbackRegistry: FrameCallbackRegistryUI;\n\n  namespace NodeJS {\n    interface Global {\n      _WORKLET: boolean;\n      _IS_FABRIC: boolean;\n      _REANIMATED_VERSION_CPP: string;\n      _frameTimestamp: number | null;\n      _eventTimestamp: number;\n      __reanimatedModuleProxy: NativeReanimated;\n      _setGlobalConsole: (console?: ReanimatedConsole) => void;\n      _log: (s: string) => void;\n      _getCurrentTime: () => number;\n      _getTimestamp: () => number;\n      _setGestureState: (handlerTag: number, newState: number) => void;\n      _makeShareableClone: (value: any) => any;\n      _updateDataSynchronously: (\n        ShareableSyncDataHolderRef,\n        ShareableRef\n      ) => void;\n      _scheduleOnJS: (fun: ShareableRef, args?: ShareableRef) => void;\n      _updatePropsPaper: (\n        tag: number,\n        name: string,\n        updates: StyleProps | AnimatedStyle\n      ) => void;\n      _updatePropsFabric: (\n        shadowNodeWrapper: ShadowNodeWrapper,\n        props: StyleProps | AnimatedStyle\n      ) => void;\n      _removeShadowNodeFromRegistry: (\n        shadowNodeWrapper: ShadowNodeWrapper\n      ) => void;\n      _measure: (viewTag: number) => MeasuredDimensions;\n      _scrollTo: (\n        viewTag: number,\n        x: number,\n        y: number,\n        animated: boolean\n      ) => void;\n      _dispatchCommand: (\n        shadowNodeWrapper: ShadowNodeWrapper,\n        commandName: string,\n        args: Array<unknown>\n      ) => void;\n      _chronoNow: () => number;\n      performance: { now: () => number };\n      LayoutAnimationsManager: {\n        start: LayoutAnimationStartFunction;\n      };\n      ReanimatedDataMock: {\n        now: () => number;\n      };\n      _frameCallbackRegistry: FrameCallbackRegistryUI;\n      __workletsCache?: Map<string, (...args: any[]) => any>;\n      __handleCache?: WeakMap<any, any>;\n      __mapperRegistry?: MapperRegistry;\n    }\n  }\n}\n"],"mappings":""}