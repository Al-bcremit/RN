{"version":3,"names":["SensorType","initSensorData","sensorType","ROTATION","makeMutable","qw","qx","qy","qz","yaw","pitch","roll","x","y","z","useAnimatedSensor","userConfig","ref","useRef","sensor","unregister","isAvailable","config","interval","useEffect","current","sensorData","id","registerSensor","data","value","unregisterSensor"],"sources":["useAnimatedSensor.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { makeMutable, registerSensor, unregisterSensor } from '../core';\nimport { SharedValue, Value3D, ValueRotation } from '../commonTypes';\n\nexport enum SensorType {\n  ACCELEROMETER = 1,\n  GYROSCOPE = 2,\n  GRAVITY = 3,\n  MAGNETIC_FIELD = 4,\n  ROTATION = 5,\n}\n\nexport type SensorConfig = {\n  interval: number | 'auto';\n};\n\nexport type AnimatedSensor = {\n  sensor: SharedValue<Value3D | ValueRotation>;\n  unregister: () => void;\n  isAvailable: boolean;\n  config: SensorConfig;\n};\n\nfunction initSensorData(\n  sensorType: SensorType\n): SharedValue<Value3D | ValueRotation> {\n  if (sensorType === SensorType.ROTATION) {\n    return makeMutable<Value3D | ValueRotation>({\n      qw: 0,\n      qx: 0,\n      qy: 0,\n      qz: 0,\n      yaw: 0,\n      pitch: 0,\n      roll: 0,\n    });\n  } else {\n    return makeMutable<Value3D | ValueRotation>({\n      x: 0,\n      y: 0,\n      z: 0,\n    });\n  }\n}\n\nexport function useAnimatedSensor(\n  sensorType: SensorType,\n  userConfig?: SensorConfig\n): AnimatedSensor {\n  const ref = useRef<AnimatedSensor>({\n    sensor: initSensorData(sensorType),\n    unregister: () => {\n      // NOOP\n    },\n    isAvailable: false,\n    config: {\n      interval: 0,\n    },\n  });\n\n  useEffect(() => {\n    ref.current.config = { interval: 'auto', ...userConfig };\n    const sensorData = ref.current.sensor!;\n    const id = registerSensor(\n      sensorType,\n      ref.current.config.interval === 'auto' ? -1 : ref.current.config.interval,\n      (data) => {\n        'worklet';\n        sensorData.value = data;\n      }\n    );\n\n    if (id !== -1) {\n      // if sensor is available\n      ref.current.unregister = () => unregisterSensor(id);\n      ref.current.isAvailable = true;\n    } else {\n      // if sensor is unavailable\n      ref.current.unregister = () => {\n        // NOOP\n      };\n      ref.current.isAvailable = false;\n    }\n\n    return () => {\n      ref.current.unregister();\n    };\n  }, [sensorType, userConfig]);\n\n  return ref.current;\n}\n"],"mappings":";;;;;;;;AAAA;;AACA;;IAGYA,U;;;WAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;GAAAA,U,0BAAAA,U;;AAmBZ,SAASC,cAAT,CACEC,UADF,EAEwC;EACtC,IAAIA,UAAU,KAAKF,UAAU,CAACG,QAA9B,EAAwC;IACtC,OAAO,IAAAC,iBAAA,EAAqC;MAC1CC,EAAE,EAAE,CADsC;MAE1CC,EAAE,EAAE,CAFsC;MAG1CC,EAAE,EAAE,CAHsC;MAI1CC,EAAE,EAAE,CAJsC;MAK1CC,GAAG,EAAE,CALqC;MAM1CC,KAAK,EAAE,CANmC;MAO1CC,IAAI,EAAE;IAPoC,CAArC,CAAP;EASD,CAVD,MAUO;IACL,OAAO,IAAAP,iBAAA,EAAqC;MAC1CQ,CAAC,EAAE,CADuC;MAE1CC,CAAC,EAAE,CAFuC;MAG1CC,CAAC,EAAE;IAHuC,CAArC,CAAP;EAKD;AACF;;AAEM,SAASC,iBAAT,CACLb,UADK,EAELc,UAFK,EAGW;EAChB,MAAMC,GAAG,GAAG,IAAAC,aAAA,EAAuB;IACjCC,MAAM,EAAElB,cAAc,CAACC,UAAD,CADW;IAEjCkB,UAAU,EAAE,MAAM,CAChB;IACD,CAJgC;IAKjCC,WAAW,EAAE,KALoB;IAMjCC,MAAM,EAAE;MACNC,QAAQ,EAAE;IADJ;EANyB,CAAvB,CAAZ;EAWA,IAAAC,gBAAA,EAAU,MAAM;IACdP,GAAG,CAACQ,OAAJ,CAAYH,MAAZ,GAAqB;MAAEC,QAAQ,EAAE,MAAZ;MAAoB,GAAGP;IAAvB,CAArB;IACA,MAAMU,UAAU,GAAGT,GAAG,CAACQ,OAAJ,CAAYN,MAA/B;IACA,MAAMQ,EAAE,GAAG,IAAAC,oBAAA,EACT1B,UADS,EAETe,GAAG,CAACQ,OAAJ,CAAYH,MAAZ,CAAmBC,QAAnB,KAAgC,MAAhC,GAAyC,CAAC,CAA1C,GAA8CN,GAAG,CAACQ,OAAJ,CAAYH,MAAZ,CAAmBC,QAFxD,EAGRM,IAAD,IAAU;MACR;;MACAH,UAAU,CAACI,KAAX,GAAmBD,IAAnB;IACD,CANQ,CAAX;;IASA,IAAIF,EAAE,KAAK,CAAC,CAAZ,EAAe;MACb;MACAV,GAAG,CAACQ,OAAJ,CAAYL,UAAZ,GAAyB,MAAM,IAAAW,sBAAA,EAAiBJ,EAAjB,CAA/B;;MACAV,GAAG,CAACQ,OAAJ,CAAYJ,WAAZ,GAA0B,IAA1B;IACD,CAJD,MAIO;MACL;MACAJ,GAAG,CAACQ,OAAJ,CAAYL,UAAZ,GAAyB,MAAM,CAC7B;MACD,CAFD;;MAGAH,GAAG,CAACQ,OAAJ,CAAYJ,WAAZ,GAA0B,KAA1B;IACD;;IAED,OAAO,MAAM;MACXJ,GAAG,CAACQ,OAAJ,CAAYL,UAAZ;IACD,CAFD;EAGD,CA3BD,EA2BG,CAAClB,UAAD,EAAac,UAAb,CA3BH;EA6BA,OAAOC,GAAG,CAACQ,OAAX;AACD"}