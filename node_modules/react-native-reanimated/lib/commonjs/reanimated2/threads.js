"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runOnJS = runOnJS;
exports.runOnUI = runOnUI;

var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));

var _shareables = require("./shareables");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function runOnUI(worklet) {
  if (__DEV__) {
    if (worklet.__workletHash === undefined) {
      throw new Error('runOnUI() can only be used on worklets');
    }
  }

  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _NativeReanimated.default.scheduleOnUI((0, _shareables.makeShareableCloneRecursive)(() => {
      'worklet';

      return worklet(...args);
    }));
  };
}

function runOnJS(fun) {
  'worklet';

  if (fun.__remoteFunction) {
    // in development mode the function provided as `fun` throws an error message
    // such that when someone accidently calls it directly on the UI runtime, they
    // see that they should use `runOnJS` instead. To facilitate that we purt the
    // reference to the original remote function in the `__remoteFunction` property.
    fun = fun.__remoteFunction;
  }

  if (!_WORKLET) {
    return fun;
  }

  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _scheduleOnJS(fun, args.length > 0 ? (0, _shareables.makeShareableCloneOnUIRecursive)(args) : undefined);
  };
}
//# sourceMappingURL=threads.js.map