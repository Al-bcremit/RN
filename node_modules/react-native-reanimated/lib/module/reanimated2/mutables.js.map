{"version":3,"names":["NativeReanimatedModule","makeShareableCloneOnUIRecursive","makeShareableCloneRecursive","registerShareableMapping","runOnUI","valueSetter","stopMapper","makeUIMutable","initial","syncDataHolder","listeners","Map","value","self","newValue","_value","_updateDataSynchronously","forEach","listener","addListener","id","set","removeListener","delete","_animation","makeMutable","oneWayReadsOnly","native","makeSynchronizedDataHolder","handle","__init","undefined","mutable","getDataSynchronously","Error","modify","modifier","makeRemote"],"sources":["mutables.ts"],"sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport { SharedValue, ShareableSyncDataHolderRef } from './commonTypes';\nimport {\n  makeShareableCloneOnUIRecursive,\n  makeShareableCloneRecursive,\n  registerShareableMapping,\n} from './shareables';\nimport { runOnUI } from './threads';\nimport { valueSetter } from './valueSetter';\nexport { stopMapper } from './mappers';\n\nexport function makeUIMutable<T>(\n  initial: T,\n  syncDataHolder?: ShareableSyncDataHolderRef<T>\n) {\n  'worklet';\n\n  const listeners = new Map();\n  let value = initial;\n\n  const self = {\n    set value(newValue) {\n      valueSetter(self, newValue);\n    },\n    get value() {\n      return value;\n    },\n    /**\n     * _value prop should only be accessed by the valueSetter implementation\n     * which may make the decision about updating the mutable value depending\n     * on the provided new value. All other places should only attempt to modify\n     * the mutable by assigning to value prop directly.\n     */\n    set _value(newValue: T) {\n      value = newValue;\n      if (syncDataHolder) {\n        _updateDataSynchronously(\n          syncDataHolder,\n          makeShareableCloneOnUIRecursive(newValue)\n        );\n      }\n      listeners.forEach((listener) => {\n        listener(newValue);\n      });\n    },\n    get _value(): T {\n      return value;\n    },\n    addListener: (id: number, listener: (newValue: T) => void) => {\n      listeners.set(id, listener);\n    },\n    removeListener: (id: number) => {\n      listeners.delete(id);\n    },\n    _animation: null,\n  };\n  return self;\n}\n\nexport function makeMutable<T>(\n  initial: T,\n  oneWayReadsOnly = false\n): SharedValue<T> {\n  let value: T = initial;\n  let syncDataHolder: ShareableSyncDataHolderRef<T> | undefined;\n  if (!oneWayReadsOnly && NativeReanimatedModule.native) {\n    // updates are always synchronous when running on web or in Jest environment\n    syncDataHolder = NativeReanimatedModule.makeSynchronizedDataHolder(\n      makeShareableCloneRecursive(value)\n    );\n    registerShareableMapping(syncDataHolder);\n  }\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return makeUIMutable(initial, syncDataHolder);\n    },\n  });\n  // listeners can only work on JS thread on Web and jest environments\n  const listeners = NativeReanimatedModule.native ? undefined : new Map();\n  const mutable = {\n    set value(newValue) {\n      if (NativeReanimatedModule.native) {\n        runOnUI(() => {\n          'worklet';\n          mutable.value = newValue;\n        })();\n      } else {\n        valueSetter(mutable, newValue);\n      }\n    },\n    get value() {\n      if (syncDataHolder) {\n        return NativeReanimatedModule.getDataSynchronously(syncDataHolder);\n      }\n      return value;\n    },\n    set _value(newValue: T) {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'Setting `_value` directly is only possible on the UI runtime'\n        );\n      }\n      value = newValue;\n      listeners!.forEach((listener) => {\n        listener(newValue);\n      });\n    },\n    get _value(): T {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'Reading from `_value` directly is only possible on the UI runtime'\n        );\n      }\n      return value;\n    },\n    modify: (modifier: (value: T) => T) => {\n      runOnUI(() => {\n        'worklet';\n        mutable.value = modifier(mutable.value);\n      })();\n    },\n    addListener: (id: number, listener: (value: T) => void) => {\n      if (NativeReanimatedModule.native) {\n        throw new Error('adding listeners is only possible on the UI runtime');\n      }\n      listeners!.set(id, listener);\n    },\n    removeListener: (id: number) => {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'removing listeners is only possible on the UI runtime'\n        );\n      }\n      listeners!.delete(id);\n    },\n  };\n  registerShareableMapping(mutable, handle);\n  return mutable;\n}\n\nexport function makeRemote<T extends object>(initial: T = {} as T): T {\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return initial;\n    },\n  });\n  registerShareableMapping(initial, handle);\n  return initial;\n}\n"],"mappings":"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"}