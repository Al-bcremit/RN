function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { NativeReanimated } from '../NativeReanimated/NativeReanimated';
import { isJest } from '../PlatformChecker';
export default class JSReanimated extends NativeReanimated {
  constructor() {
    super(false);

    _defineProperty(this, "_valueUnpacker", undefined);

    if (isJest()) {
      // on node < 16 jest have problems mocking performance.now method which
      // results in the tests failing, since date precision isn't that important
      // for tests, we use Date.now instead
      this.getTimestamp = () => Date.now();
    } else {
      this.getTimestamp = () => window.performance.now();
    }
  }

  makeShareableClone(value) {
    return {
      __hostObjectShareableJSRef: value
    };
  }

  installCoreFunctions(valueUnpacker) {
    this._valueUnpacker = valueUnpacker;
  }

  scheduleOnUI(worklet) {
    // @ts-ignore web implementation has still not been updated after the rewrite, this will be addressed once the web implementation updates are ready
    requestAnimationFrame(worklet);
  }

  registerEventHandler(_eventHash, _eventHandler) {
    // noop
    return '';
  }

  unregisterEventHandler(_) {// noop
  }

  enableLayoutAnimations() {
    console.warn('[Reanimated] enableLayoutAnimations is not available for WEB yet');
  }

  registerSensor() {
    console.warn('[Reanimated] useAnimatedSensor is not available on web yet.');
    return -1;
  }

  unregisterSensor() {// noop
  }

  subscribeForKeyboardEvents(_) {
    console.warn('[Reanimated] useAnimatedKeyboard is not available on web yet.');
    return -1;
  }

  unsubscribeFromKeyboardEvents(_) {// noop
  }

}
//# sourceMappingURL=JSReanimated.js.map